{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../api.service\";\nexport class Comp1Component {\n  constructor(api) {\n    this.api = api;\n    this.subjects = '';\n  }\n\n  ngOnInit() {\n    // The subject is observable. It must have the ability to emit a stream of values\n    // The previous example shows, we can use the next method to emit values into the stream.\n    this.api.subject$.next(\"Hi ,I am Subject\"); // BehaviorSubject requires an initial value and stores the current value\n    // and emits it to the new subscribers.\n\n    this.api.behaviorSubject$.next(1);\n    this.api.behaviorSubject$.error(\"error\");\n    this.api.behaviorSubject$.complete(); // ReplaySubject replays old values to new subscribers\n    // when they first subscribe.\n\n    this.api.replaySubject$.next(\"Welcome, This is ReplaySubject\"); // AsyncSubject only emits the latest value only when it completes.\n    // If it errors out then it will emit an error, but will not emit any values.\n\n    this.api.asyncSubject$.next(\"Welcome, This is AsyncSubject\");\n    this.api.asyncSubject$.complete();\n  }\n\n}\n\nComp1Component.ɵfac = function Comp1Component_Factory(t) {\n  return new (t || Comp1Component)(i0.ɵɵdirectiveInject(i1.ApiService));\n};\n\nComp1Component.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: Comp1Component,\n  selectors: [[\"app-comp1\"]],\n  decls: 0,\n  vars: 0,\n  template: function Comp1Component_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjb21wMS5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"sources":["/home/knoldus/projecttry/src/app/component/comp1/comp1.component.ts"],"names":["i0","i1","Comp1Component","constructor","api","subjects","ngOnInit","subject$","next","behaviorSubject$","error","complete","replaySubject$","asyncSubject$","ɵfac","Comp1Component_Factory","t","ɵɵdirectiveInject","ApiService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","template","Comp1Component_Template","rf","ctx","styles"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACH;;AACDC,EAAAA,QAAQ,GAAG;AACP;AACA;AACA,SAAKF,GAAL,CAASG,QAAT,CAAkBC,IAAlB,CAAuB,kBAAvB,EAHO,CAIP;AACA;;AACA,SAAKJ,GAAL,CAASK,gBAAT,CAA0BD,IAA1B,CAA+B,CAA/B;AACA,SAAKJ,GAAL,CAASK,gBAAT,CAA0BC,KAA1B,CAAgC,OAAhC;AACA,SAAKN,GAAL,CAASK,gBAAT,CAA0BE,QAA1B,GARO,CASP;AACA;;AACA,SAAKP,GAAL,CAASQ,cAAT,CAAwBJ,IAAxB,CAA6B,gCAA7B,EAXO,CAYP;AACA;;AACA,SAAKJ,GAAL,CAASS,aAAT,CAAuBL,IAAvB,CAA4B,+BAA5B;AACA,SAAKJ,GAAL,CAASS,aAAT,CAAuBF,QAAvB;AACH;;AArBuB;;AAuB5BT,cAAc,CAACY,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAId,cAAV,EAA0BF,EAAE,CAACiB,iBAAH,CAAqBhB,EAAE,CAACiB,UAAxB,CAA1B,CAAP;AAAwE,CAAnI;;AACAhB,cAAc,CAACiB,IAAf,GAAsB,aAAcnB,EAAE,CAACoB,iBAAH,CAAqB;AAAEC,EAAAA,IAAI,EAAEnB,cAAR;AAAwBoB,EAAAA,SAAS,EAAE,CAAC,CAAC,WAAD,CAAD,CAAnC;AAAoDC,EAAAA,KAAK,EAAE,CAA3D;AAA8DC,EAAAA,IAAI,EAAE,CAApE;AAAuEC,EAAAA,QAAQ,EAAE,SAASC,uBAAT,CAAiCC,EAAjC,EAAqCC,GAArC,EAA0C,CAAG,CAA9H;AAAgIC,EAAAA,MAAM,EAAE,CAAC,qKAAD;AAAxI,CAArB,CAApC","sourcesContent":["import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../api.service\";\nexport class Comp1Component {\n    constructor(api) {\n        this.api = api;\n        this.subjects = '';\n    }\n    ngOnInit() {\n        // The subject is observable. It must have the ability to emit a stream of values\n        // The previous example shows, we can use the next method to emit values into the stream.\n        this.api.subject$.next(\"Hi ,I am Subject\");\n        // BehaviorSubject requires an initial value and stores the current value\n        // and emits it to the new subscribers.\n        this.api.behaviorSubject$.next(1);\n        this.api.behaviorSubject$.error(\"error\");\n        this.api.behaviorSubject$.complete();\n        // ReplaySubject replays old values to new subscribers\n        // when they first subscribe.\n        this.api.replaySubject$.next(\"Welcome, This is ReplaySubject\");\n        // AsyncSubject only emits the latest value only when it completes.\n        // If it errors out then it will emit an error, but will not emit any values.\n        this.api.asyncSubject$.next(\"Welcome, This is AsyncSubject\");\n        this.api.asyncSubject$.complete();\n    }\n}\nComp1Component.ɵfac = function Comp1Component_Factory(t) { return new (t || Comp1Component)(i0.ɵɵdirectiveInject(i1.ApiService)); };\nComp1Component.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: Comp1Component, selectors: [[\"app-comp1\"]], decls: 0, vars: 0, template: function Comp1Component_Template(rf, ctx) { }, styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjb21wMS5jb21wb25lbnQuY3NzIn0= */\"] });\n"]},"metadata":{},"sourceType":"module"}